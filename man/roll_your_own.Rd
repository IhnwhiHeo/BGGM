% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/roll_your_own.R
\name{roll_your_own}
\alias{roll_your_own}
\title{Compute Custom Network Statistics}
\usage{
roll_your_own(object, FUN, iter = NULL, select = FALSE, cred = 0.95, ...)
}
\arguments{
\item{object}{An object of class \code{estimate}.}

\item{FUN}{A custom function for computing the statistic. The first argument must be
a partial correlation matrix.}

\item{iter}{Number of iterations (posterior samples; defaults to the number in the object).}

\item{select}{Logical. Should the graph be selected ? The default is currently \code{FALSE}.}

\item{cred}{Numeric. Credible interval between 0 and 1  (default is 0.95) that is used for selecting the graph.}

\item{...}{Arguments passed to the function.}
}
\value{
An object defined by \code{FUN}.
}
\description{
This function allows for computing custom network statistics for
weighted adjacency matrices (partial correlations). The statistics are computed for
each of the sampled matrices, resulting in a distribution.
}
\details{
The user has complete control of this function. Hence, care must be taken as to what \code{FUN} returns
and in what format.
}
\examples{
\donttest{

####################################
###### example 1: assortment #######
####################################
library(assortnet)

Y <- BGGM::bfi[,1:10]
membership <- c(rep("a", 5), rep("c", 5))

# fit model
fit <- estimate(Y = Y,
                analytic = FALSE,
                iter = 1000)

# list of columns belowinging in each group
e.g., first 5 are "a", last 5 are "c"

membership <- c(rep("a", 5), rep("c", 5))

f <- function(x,...){
assortment.discrete(x, ...)$r
}


net_stat <- roll_your_own(object = fit,
                          FUN = f,
                          types = membership,
                          weighted = TRUE,
                          SE = FALSE, M = 1)

hist(net_stat)


############################################
###### example 2: expected influence #######
############################################
library(networkTools)

# data
Y <- depression

# fit model
fit <- estimate(Y = Y, iter = 5000)

# define function
f <- function(x,...){
  expectedInf(x,...)$step1
}

# compute
net_stat <- roll_your_own(object = fit,
                          FUN = f,
                          iter = 1000)

colmeans
colMeans(t(net_stat))

# full distribution (node 1)
hist(net_stat[1,])
}
}
